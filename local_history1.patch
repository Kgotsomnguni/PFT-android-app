Index: app/src/main/java/com/example/profocusedtiming/AdvancedEntries.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/profocusedtiming/AdvancedEntries.java b/app/src/main/java/com/example/profocusedtiming/AdvancedEntries.java
--- a/app/src/main/java/com/example/profocusedtiming/AdvancedEntries.java	
+++ b/app/src/main/java/com/example/profocusedtiming/AdvancedEntries.java	(date 1686667498923)
@@ -1,14 +1,184 @@
 package com.example.profocusedtiming;
 
-import androidx.appcompat.app.AppCompatActivity;
-
+import android.Manifest;
+import android.app.Activity;
+import android.app.DatePickerDialog;
+import android.app.TimePickerDialog;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.graphics.Bitmap;
 import android.os.Bundle;
+import android.provider.MediaStore;
+import android.view.View;
+import android.widget.Button;
+import android.widget.DatePicker;
+import android.widget.ImageView;
+import android.widget.TextView;
+import android.widget.TimePicker;
+import android.widget.Toast;
+
+import androidx.activity.result.ActivityResult;
+import androidx.activity.result.ActivityResultCallback;
+import androidx.activity.result.ActivityResultLauncher;
+import androidx.activity.result.contract.ActivityResultContracts;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.app.ActivityCompat;
+import androidx.core.content.ContextCompat;
 
 public class AdvancedEntries extends AppCompatActivity {
 
+    Button  btnDate;
+    TextView tv2;
+    TextView StartTime;
+    TextView EndTime;
+    Button btnEndTime;
+    Button btnStartTime;
+    private static final int REQUEST_CAMERA_PERMISSION = 200;
+    private ImageView imageView;
+    private Button buttonAddphoto;
+    private ActivityResultLauncher<Intent> cameraLauncher;
+    private boolean tookItemImage = false;
+
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_advanced_entries);
-    }
+        imageView = findViewById(R.id.imageView);
+        buttonAddphoto = findViewById(R.id.buttonAddphoto);
+        //new code
+        Button cancel = findViewById(R.id.buttonCancelEntry);
+        Button  btnDate= findViewById(R.id.buttonSelectDate);
+        tv2 = findViewById(R.id.ShowDate);
+        StartTime = findViewById(R.id.ShowStarttime);
+        EndTime = findViewById(R.id.ShowEndtime);
+        btnEndTime=findViewById(R.id.buttonEndTime);
+        btnStartTime=findViewById(R.id.buttonStartTime);
+        Button CreateEntry = findViewById(R.id.buttonCreateEntry);
+        buttonAddphoto = findViewById(R.id.buttonAddphoto);
+        imageView = findViewById(R.id.imageView);
+        //end of code
+        //-------------
+        CreateEntry.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+
+
+
+            }
+        });
+        //------
+        btnDate.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                OpenDateDialog();
+            }
+        });
+        //method for when the cancel button is clicked.
+        cancel.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                startActivity(new Intent(AdvancedEntries.this,HomeActivity.class));
+            }
+        });
+
+        //method for start time
+        btnStartTime.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                OpenTimeDialog();
+            }
+        });
+        //method for end time
+        btnEndTime.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                EndTimeDialog();
+            }
+        });
+        //-------
+        cameraLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(),
+                new ActivityResultCallback<ActivityResult>() {
+                    @Override
+                    public void onActivityResult(ActivityResult result) {
+                        if (result.getResultCode() == Activity.RESULT_OK) {
+                            Intent data = result.getData();
+                            Bundle extras = data.getExtras();
+                            Bitmap imageBitmap = (Bitmap) extras.get("data");
+                            imageView.setImageBitmap(imageBitmap);
+                            tookItemImage = true;
+                        }
+                    }
+                });
+        //------
+        buttonAddphoto.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                checkCameraPermission();
+            }
+        });
+    }
+
+    private void dispatchTakePictureIntent() {
+        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
+            cameraLauncher.launch(takePictureIntent);
+        }
+    }
+
+    //--------
+    @Override
+    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+        if (requestCode == REQUEST_CAMERA_PERMISSION) {
+            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                dispatchTakePictureIntent();
+            } else {
+                Toast.makeText(getApplicationContext(), "Camera Permission Denied", Toast.LENGTH_SHORT).show();
+            }
+        }
+    }
+    //------
+    private void checkCameraPermission() {
+        if (ContextCompat.checkSelfPermission(AdvancedEntries.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
+            ActivityCompat.requestPermissions(AdvancedEntries.this, new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
+        } else {
+            dispatchTakePictureIntent();
+        }
+    }
+
+    //------
+    public void OpenDateDialog(){
+        DatePickerDialog dialog = new DatePickerDialog(this,R.style.DialogTheme, new DatePickerDialog.OnDateSetListener() {
+            @Override
+            public void onDateSet(DatePicker datePicker, int year, int month, int day) {
+                tv2.setText(String.valueOf(year)+" . "+String.valueOf(month+1)+" . "+String.valueOf(day));
+            }
+        }, 2023, 0, 01);
+        dialog.show();
+    }
+    public void OpenTimeDialog(){
+        TimePickerDialog Timedialog = new TimePickerDialog(this,R.style.DialogTheme, new TimePickerDialog.OnTimeSetListener() {
+            @Override
+            public void onTimeSet(TimePicker timePicker, int Hours, int minutes) {
+                StartTime.setText(String.valueOf(Hours)+":"+String.valueOf(minutes));
+
+            }
+        }, 15,00,true);
+        Timedialog.show();
+    }
+    public void EndTimeDialog(){
+        TimePickerDialog Enddialog = new TimePickerDialog(this,R.style.DialogTheme, new TimePickerDialog.OnTimeSetListener() {
+            @Override
+            public void onTimeSet(TimePicker timePicker, int Hours, int minutes) {
+                EndTime.setText(String.valueOf(Hours)+":"+String.valueOf(minutes));
+                EndTime.getText().toString();
+
+
+            }
+        }, 15,00,true);
+        Enddialog.show();
+    }
+
+
 }
\ No newline at end of file
